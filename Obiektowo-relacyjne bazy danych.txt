1.
create type samochod as object (
    marka varchar2(20),
    model varchar2(20),
    kilometry number,
    data_produkcji date,
    cena number(10,2)
);

create table samochody of samochod;

insert into samochody values ('FIAT', 'BRAVA', 60000, '30-NOV-1999', 25000);
insert into samochody values ('FORD', 'MONDEO', 80000, '10-MAY-1997', 45000);
insert into samochody values ('MAZDA', '323', 12000, '22-SEP-2000', 52000);


2.

CREATE TABLE wlasciciele (
    imie varchar2(100),
    nazwisko varchar2(100),
    auto samochod
);

insert into wlasciciele values('Jan', 'Kowalski', new samochod('Fiat', 'Seicento', 30000, '02-DEC-2010', 19500));
insert into wlasciciele values('Adam', 'Nowak', new samochod('Opel', 'Astra', 34000, '01-JUN-2009', 33700));

3.

alter type samochod replace as object (
    marka varchar2(20),
    model varchar2(20),
    kilometry number,
    data_produkcji date,
    cena number(10,2),
    member function wartosc return number
);

CREATE OR REPLACE TYPE BODY samochod AS
MEMBER FUNCTION wartosc RETURN NUMBER IS
wiek number;
p_wartosc number;
BEGIN
wiek := EXTRACT (YEAR FROM CURRENT_DATE) - EXTRACT (YEAR FROM data_produkcji);
p_wartosc := cena;
for i in 1..wiek loop
    p_wartosc := p_wartosc * 0.9;
end loop;
return p_wartosc;
END wartosc;
END;

4.

alter type samochod replace as object (
    marka varchar2(20),
    model varchar2(20),
    kilometry number,
    data_produkcji date,
    cena number(10,2),
    member function wartosc return number,
    member function wiek return number
);

ALTER TYPE samochod ADD MAP MEMBER FUNCTION odwzoruj
RETURN NUMBER CASCADE INCLUDING TABLE DATA;

CREATE OR REPLACE TYPE BODY samochod AS
MEMBER FUNCTION wartosc RETURN NUMBER IS
wiek number;
p_wartosc number;
BEGIN
wiek := EXTRACT (YEAR FROM CURRENT_DATE) - EXTRACT (YEAR FROM data_produkcji);
p_wartosc := cena;
for i in 1..wiek loop
    p_wartosc := p_wartosc * 0.9;
end loop;
return p_wartosc;
END wartosc;
    MEMBER FUNCTION wiek RETURN NUMBER IS
    BEGIN
        RETURN EXTRACT (YEAR FROM CURRENT_DATE) - EXTRACT (YEAR FROM data_produkcji);
    END wiek;
    MAP MEMBER FUNCTION odwzoruj RETURN NUMBER IS
    BEGIN
        RETURN (kilometry / 10000) + wiek();
    END odwzoruj;
END;

5.

create type Wlasciciel as object (
    imie varchar2(20),
    nazwisko varchar2(20)
);

create type Samochod as object (
    marka varchar2(20),
    model varchar2(20),
    kilometry number,
    data_produkcji date,
    cena number(10,2),
    wlasciciel ref Wlasciciel,
    member function wartosc return number,
    member function wiek return number
);

6. W zasadzie kod z PDFu robi to, czego wymaga polecenie:

DECLARE
TYPE t_przedmioty IS VARRAY(10) OF VARCHAR2(20);
moje_przedmioty t_przedmioty := t_przedmioty('');
BEGIN
moje_przedmioty(1) := 'MATEMATYKA';
moje_przedmioty.EXTEND(9);
FOR i IN 2..10 LOOP
moje_przedmioty(i) := 'PRZEDMIOT_' || i;
END LOOP;
FOR i IN moje_przedmioty.FIRST()..moje_przedmioty.LAST() LOOP
DBMS_OUTPUT.PUT_LINE(moje_przedmioty(i));
END LOOP;
moje_przedmioty.TRIM(2);
FOR i IN moje_przedmioty.FIRST()..moje_przedmioty.LAST() LOOP
DBMS_OUTPUT.PUT_LINE(moje_przedmioty(i));
END LOOP;
DBMS_OUTPUT.PUT_LINE('Limit: ' || moje_przedmioty.LIMIT());
DBMS_OUTPUT.PUT_LINE('Liczba elementow: ' || moje_przedmioty.COUNT());
moje_przedmioty.EXTEND();
moje_przedmioty(9) := 9;
DBMS_OUTPUT.PUT_LINE('Limit: ' || moje_przedmioty.LIMIT());
DBMS_OUTPUT.PUT_LINE('Liczba elementow: ' || moje_przedmioty.COUNT());
moje_przedmioty.DELETE();
DBMS_OUTPUT.PUT_LINE('Limit: ' || moje_przedmioty.LIMIT());
DBMS_OUTPUT.PUT_LINE('Liczba elementow: ' || moje_przedmioty.COUNT());
END;

7.

DECLARE
TYPE t_tytuly IS VARRAY(5) OF VARCHAR2(50);
moje_tytuly t_tytuly := t_tytuly('');
BEGIN
moje_tytuly(1) := 'OGNIEM I MIECZEM';
moje_tytuly.EXTEND(3);
moje_tytuly(4) := 'HARRY POTTER';
moje_tytuly.TRIM(4);
moje_tytuly.DELETE();
END;

8. Ponownie polecenie zawiera odpowiedź:

DECLARE
TYPE t_wykladowcy IS TABLE OF VARCHAR2(20);
moi_wykladowcy t_wykladowcy := t_wykladowcy();
BEGIN
moi_wykladowcy.EXTEND(2);
moi_wykladowcy(1) := 'MORZY';
moi_wykladowcy(2) := 'WOJCIECHOWSKI';
moi_wykladowcy.EXTEND(8);
FOR i IN 3..10 LOOP
moi_wykladowcy(i) := 'WYKLADOWCA_' || i;
END LOOP;
FOR i IN moi_wykladowcy.FIRST()..moi_wykladowcy.LAST() LOOP
DBMS_OUTPUT.PUT_LINE(moi_wykladowcy(i));
END LOOP;
moi_wykladowcy.TRIM(2);
FOR i IN moi_wykladowcy.FIRST()..moi_wykladowcy.LAST() LOOP
DBMS_OUTPUT.PUT_LINE(moi_wykladowcy(i));
END LOOP;
moi_wykladowcy.DELETE(5,7);
DBMS_OUTPUT.PUT_LINE('Limit: ' || moi_wykladowcy.LIMIT());
DBMS_OUTPUT.PUT_LINE('Liczba elementow: ' || moi_wykladowcy.COUNT());
FOR i IN moi_wykladowcy.FIRST()..moi_wykladowcy.LAST() LOOP
IF moi_wykladowcy.EXISTS(i) THEN
DBMS_OUTPUT.PUT_LINE(moi_wykladowcy(i));
END IF;
END LOOP;
moi_wykladowcy(5) := 'ZAKRZEWICZ';
moi_wykladowcy(6) := 'KROLIKOWSKI';
moi_wykladowcy(7) := 'KOSZLAJDA';
FOR i IN moi_wykladowcy.FIRST()..moi_wykladowcy.LAST() LOOP
IF moi_wykladowcy.EXISTS(i) THEN
DBMS_OUTPUT.PUT_LINE(moi_wykladowcy(i));
END IF;
END LOOP;
DBMS_OUTPUT.PUT_LINE('Limit: ' || moi_wykladowcy.LIMIT());
DBMS_OUTPUT.PUT_LINE('Liczba elementow: ' || moi_wykladowcy.COUNT());
END;

9.

DECLARE
TYPE t_miesiace IS TABLE OF VARCHAR2(12);
moje_miesiace t_miesiace := t_miesiace();
BEGIN
    moje_miesiace.EXTEND(12);
    moje_miesiace(1) := 'STYCZEN';
    moje_miesiace(2) := 'LUTY';
    moje_miesiace(3) := 'MARZEC';
    moje_miesiace(4) := 'KWIECIEN';
    moje_miesiace(5) := 'MAJ';
    moje_miesiace(6) := 'CZERWIEC';
    moje_miesiace(7) := 'LIPIEC';
    moje_miesiace(8) := 'SIERIEN';
    moje_miesiace(9) := 'WRZESIEN';
    moje_miesiace(10) := 'PAZDZIERNIK';
    moje_miesiace(11) := 'LISTOPAD';
    moje_miesiace(12) := 'GRUDZIEN';
    FOR i IN moje_miesiace.FIRST()..moje_miesiace.LAST() LOOP
        DBMS_OUTPUT.PUT_LINE(moje_miesiace(i));
    END LOOP;
    moje_miesiace.DELETE(7,9);
    FOR i IN moje_miesiace.FIRST()..moje_miesiace.LAST() LOOP
        IF moje_miesiace.EXISTS(i) THEN
            DBMS_OUTPUT.PUT_LINE(moje_miesiace(i));
        END IF;
    END LOOP;
END;

10. Odpowiedź w zadaniu.

11.

CREATE TYPE KOSZYK_PRODUKTOW AS VARRAY(10) OF VARCHAR2(20);
/
CREATE TYPE transakcja AS OBJECT (
numer_transakcji VARCHAR2(50),
koszyk koszyk_produktow );
/
CREATE TABLE zakupy OF transakcja;
INSERT INTO zakupy VALUES
('tpd123',koszyk_produktow('ZUPA','ZĄB','DĄB'));
INSERT INTO zakupy VALUES
('tpd124',koszyk_produktow('PŁATKI','MLEKO','MLEKO'));
INSERT INTO zakupy VALUES
('tpd125',koszyk_produktow('CHLEB'));
SELECT * FROM zakupy;
delete from zakupy z where exists (select numer_transakcji from table(z.koszyk) k where k.column_value = 'ZUPA');
select * from zakupy;

12. Kod w zadaniu.

13. Hierarchia działa dobrze, poza próbą stworzenia InnaIstota - z uwagi na adnotację NOT INSTANTIABLE nie można bezpośrednio stworzyć instancji klasy istota.

14-15. - Kod w zadaniu.
